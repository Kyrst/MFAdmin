function Core_URI() {}

Core_URI.prototype =
{
	PROTOCOL_NONE: 'none',
	PROTOCOL_HTTP: 'http',
	PROTOCOL_HTTPS: 'https',
	PROTOCOL_EITHER: 'either',

	redirect: function(url, with_base_url)
	{
		window.location = (typeof with_base_url === 'boolean' ? this.urlize(url) : url);
	},

	urlize: function(url)
	{
		if ( $core.isUndefined($core.options.uri.base_url) )
		{
			$core.log('Base URL not set.');

			return;
		}

		return $core.options.uri.base_url + url;
	},

	formatURI: function(url, protocol, remove_protocol)
	{
		protocol = protocol || this.PROTOCOL_EITHER;
		remove_protocol = remove_protocol || false;

		if ( remove_protocol === false )
		{
			if ( protocol === this.PROTOCOL_HTTPS )
			{
				if ( url.substring(0, 8) !== 'https://' )
				{
					url = 'https://' + url;
				}
			}
			else if ( protocol === this.PROTOCOL_HTTP )
			{
				if ( url.substring(0, 7) !== 'http://' )
				{
					url = 'http://' + url;
				}
			}
			else if ( protocol === this.PROTOCOL_EITHER )
			{
				if ( url.substring(0, 8) !== 'https://' && url.substring(0, 7) !== 'http://' )
				{
					url = 'http://' + url;
				}
			}
		}
		else
		{
			if ( url.substring(0, 7) !== 'http://' )
			{
				url = url.substring(7);
			}
			else if ( url.substring(0, 8) !== 'https://' )
			{
				url = url.substring(8);
			}
		}

		return url;
	}
};
function Core_Ajax_Request() {}

Core_Ajax_Request.prototype =
{
	$form: null,

	url: '',
	data: {},
	method: 'GET',
	data_type: 'json',
	cache: false,
	async: true,

	result: null,

	before: null,
	progress: null,
	success: null,
	error: null,
	always: null,
	abort: null,

	execute: function()
	{
		var inst = this;

		if ( $core.isUndefined(inst.url) )
		{
			$core.log('Missing AJAX URL.');

			return;
		}

		if ( !$core.isUndefined($core.ajax.requests[inst.url]) )
		{
			$core.ajax.requests[inst.url].abort();
		}

		var file_upload = ($core.isDefined(inst.file_upload) && inst.file_upload === true);

		var headers = { 'X-XSRF-TOKEN': $core.options.csrf_token };

		if ( file_upload === true && $core.isObject(inst.file_upload_data) )
		{
			headers = $.extend(headers, inst.file_upload_data);
		}

		$core.ajax.requests[inst.url] = $.ajax(
		{
			type: inst.method,
			url: inst.url,
			data: inst.data,
			dataType: inst.data_type,
			cache: inst.cache,
			async: inst.async,
			processData: (file_upload !== true),
			contentType: (file_upload === true ? false : 'application/x-www-form-urlencoded; charset=UTF-8'),
			headers: headers,
			xhr: function()
			{
				var xhr = $.ajaxSettings.xhr();

				if ( $core.isFunction(inst.progress) )
				{
					xhr.upload.onprogress = function(e)
					{
						var percent = (e.loaded / e.total) * 100;

						inst.progress(percent);
					};
				}

				return xhr;
			},
			beforeSend: function(xhr, data)
			{
				if ( $core.isFunction(inst.before) )
				{
					inst.before(xhr, data);
				}
			}
		}).done(function(result)
		{
			if ( $core.isFunction(inst.success) )
			{
				inst.success(result);
			}

			if ( typeof result.message !== 'undefined' && result.message !== null )
			{
				if ( typeof result.message.type === 'number' && typeof result.message.text === 'string' )
				{
					$core.ui.message.engine.show(result.message.type, result.message.text);
				}
			}

			if ( !$core.isUndefined(result.redirect) )
			{
				setTimeout(function()
				{
					return $core.uri.redirect(result.redirect.url);
				}, result.redirect.delay);
			}

			inst.result = result;
		}).always(function(result)
		{
			if ( $core.isFunction(inst.always) )
			{
				inst.always(result);
			}

			delete $core.ajax.requests[inst.url];
		}).fail(function(xhr, textStatus, errorThrown)
		{
			if ( xhr === 'abort' )
			{
				if ( $core.isFunction(inst.abort) )
				{
					inst.abort();
				}
			}
			else
			{
				if ( $core.isFunction(inst.error) )
				{
					inst.error(errorThrown);
				}
			}
		});
	}
};
function Core_Ajax() {}

Core_Ajax.prototype =
{
	requests: [],

	get: function(url, data, callbacks, extra)
	{
		var request = new Core_Ajax_Request();
		request.method = 'GET';
		request.url = url;
		request.data = data;

		if ( $core.isUndefined(callbacks) )
		{
			callbacks = {};
		}

		if ( $core.isFunction(callbacks.before) )
		{
			request.before = callbacks.before;
		}

		if ( $core.isFunction(callbacks.progress) )
		{
			request.progress = callbacks.progress;
		}

		if ( $core.isFunction(callbacks.success) )
		{
			request.success = callbacks.success;
		}

		if ( $core.isFunction(callbacks.error) )
		{
			request.error = callbacks.error;
		}

		if ( $core.isFunction(callbacks.always) )
		{
			request.always = callbacks.always;
		}

		if ( $core.isFunction(callbacks.abort) )
		{
			request.abort = callbacks.abort;
		}

		if ( $core.isObject(extra) )
		{
			for ( var key in extra )
			{
				if ( extra.hasOwnProperty(key) )
				{
					request[key] = extra[key];
				}
			}
		}

		request.execute();
	},

	post: function(url, data, callbacks, extra)
	{
		var request = new Core_Ajax_Request();
		request.method = 'POST';
		request.url = url;
		request.data = data;

		if ( $core.isUndefined(callbacks) )
		{
			callbacks = {};
		}

		if ( $core.isFunction(callbacks.before) )
		{
			request.before = callbacks.before;
		}

		if ( $core.isFunction(callbacks.progress) )
		{
			request.progress = callbacks.progress;
		}

		if ( $core.isFunction(callbacks.success) )
		{
			request.success = callbacks.success;
		}

		if ( $core.isFunction(callbacks.error) )
		{
			request.error = callbacks.error;
		}

		if ( $core.isFunction(callbacks.always) )
		{
			request.always = callbacks.always;
		}

		if ( $core.isFunction(callbacks.abort) )
		{
			request.abort = callbacks.abort;
		}

		if ( $core.isObject(extra) )
		{
			for ( var key in extra )
			{
				if ( extra.hasOwnProperty(key) )
				{
					request[key] = extra[key];
				}
			}
		}

		request.execute();
	}
};
function Core_UI_Dialog() {}

Core_UI_Dialog.prototype =
{
	default_options:
	{
		modes: null,
		title: null,
		width: 640,
		height: 480,
		modal: false,
		autoOpen: false,
		closeButton: true,
		loadingText: 'Loading',
		savingText: 'Saving',
		getURL: null,
		getData: null,
		saveURL: null,
		saveData: null,
		closeAfterSave: true,
		verticalPadding: 20,
		horizontalPadding: 18,
		headerHeight: 40,
		buttonsContainerHeight: 40,
		buttons: [],
		afterLoaded: null,
		afterSaved: null
	},

	mask_id: 'core_dialog_mask',
	$mask: null,

	dialogs: {},
	current_dialog_id: null,

	init: function()
	{
		var inst = this;

		$('body').on('keyup', function(e)
		{
			if ( e.which === 27 && inst.current_dialog !== null )
			{
				if ( $core.isDefined(inst.dialogs[inst.current_dialog_id]) )
				{
					inst.dialogs[inst.current_dialog_id].close();
				}
			}
		});
	},

	create: function(options)
	{
		var inst = this,
			dialog_id = $core.getObjectSize(inst.dialogs) + 1;

		if ( typeof options !== 'object' )
		{
			$core.log('Missing options for dialog.');

			return;
		}

		for ( var option_key in inst.default_options )
		{
			if ( inst.default_options.hasOwnProperty(option_key) && !options.hasOwnProperty(option_key) )
			{
				options[option_key] = inst.default_options[option_key];
			}
		}

		var dialog =
		{
			id: dialog_id,
			selector: '#core_dialog_' + dialog_id,
			$dialog: null,
			$loader: null,
			$loader_text: null,
			$header: null,
			$content: null,
			$buttons_container: null,
			$buttons: null,
			default_line_height: null,
			mode: null,
			options: options,
			setMode: function(mode)
			{
				var dialog_inst = this;

				if ( typeof dialog_inst.options.modes[mode] === 'undefined' )
				{
					$core.log('Invalid dialog mode "' + mode + '".');

					return false;
				}

				dialog_inst.mode = mode;

				if ( typeof dialog_inst.options.modes[mode].title !== 'undefined' )
				{
					dialog_inst.setTitle(dialog_inst.options.modes[mode].title);
				}

				return true;
			},
			getMode: function()
			{
				return dialog.mode;
			},
			setTitle: function(title)
			{
				this.$header.querySelector('.core-dialog-header-title').innerHTML = title;
			},
			open: function(mode)
			{
				var dialog_inst = this;

				if ( mode !== null )
				{
					if ( dialog_inst.setMode(mode) === false )
					{
						return false;
					}
				}

				if ( dialog_inst.options.modal === true && $('#' + inst.mask_id).length === 0 )
				{
					$('body').append('<div id="' + inst.mask_id + '" class="open"></div>');

					inst.$mask = $('#' + inst.mask_id);

					inst.$mask.on('click', function()
					{
						dialog_inst.close();
					});
				}

				dialog_inst.showLoader(dialog_inst.options.loadingText);

				dialog_inst.$dialog.classList.add('open');
				$('body').append(dialog_inst.$dialog);

				var buttons = dialog_inst.getButtons();

				var buttons_html = '',
					button_key;

				for ( button_key in buttons )
				{
					var button = buttons[button_key];

					buttons_html += button.html;
				}

				dialog_inst.$buttons.innerHTML = buttons_html;

				for ( button_key in buttons )
				{
					var button = buttons[button_key];

					if ( $core.isFunction(button.click) )
					{
						(function(button)
						{
							$(button.selector).on('click', function()
							{
								if ( button.click(button) === false )
								{
									return;
								}
							});
						})(button);
					}
				}

				$(dialog_inst.selector).find('.core-dialog-close-button').on('click', function()
				{
					dialog_inst.close();
				});

				inst.current_dialog_id = dialog_id;

				$core.ajax.get
				(
					dialog_inst.options.getURL,
					dialog_inst.options.getData,
					{
						success: function(result)
						{
							dialog_inst.$content.innerHTML = result.data.html;

							[].forEach.call(dialog_inst.$content.querySelectorAll('input'), function(input)
							{
								input.addEventListener('keyup', function(e)
								{
									if ( (e.keyCode || e.which) === 13 )
									{
										return false;
									}
								}, false);
							});

							dialog.$content.style.lineHeight = dialog.default_line_height;

							dialog_inst.hideLoader();
							dialog_inst.enableButtons();

							if ( $core.isFunction(dialog_inst.options.afterLoaded) )
							{
								dialog_inst.options.afterLoaded(true, result);
							}
						},
						error: function(result)
						{
							dialog_inst.setError('Could not load dialog.');

							dialog_inst.hideLoader();
							dialog_inst.enableButtons(true);

							if ( $core.isFunction(dialog_inst.options.afterLoaded) )
							{
								dialog_inst.options.afterLoaded(false, result);
							}
						}
					}
				);
			},
			close: function()
			{
				var dialog_inst = this;

				dialog_inst.$dialog.classList.add('close');

				$(dialog_inst.selector).one('webkitAnimationEnd oanimationend msAnimationEnd animationend', function()
				{
					dialog_inst.$dialog.classList.remove('close');
					dialog_inst.$content.classList.remove('error');

					$(dialog_inst.selector).remove();
				});

				if ( dialog_inst.options.modal === true )
				{
					inst.$mask.removeClass('open').addClass('close');
					inst.$mask.one('webkitAnimationEnd oanimationend msAnimationEnd animationend', function()
					{
						if ( inst.$mask === null )
						{
							return;
						}

						inst.$mask.remove();
						inst.$mask = null;
					});
				}

				inst.current_dialog_id = null;
			},
			getButton: function(button_id)
			{
				if ( this.options.modes !== null )
				{
					var mode = this.mode;

					for ( var button_key in this.options.modes[mode].buttons )
					{
						if ( this.options.modes[mode].buttons[button_key].id === button_id )
						{
							return this.options.modes[mode].buttons[button_key];
						}
					}
				}
				else
				{
					for ( var i = 0; i < num_buttons; i++ )
					{
						if ( this.options.buttons[i].id === button_id )
						{
							return this.options.buttons[i];
						}
					}
				}

				return null;
			},
			getButtons: function()
			{
				if ( this.options.modes !== null )
				{
					return this.options.modes[dialog.mode].buttons;
				}
				else
				{
					return this.options.buttons;
				}
			},
			enableButtons: function(exclude_save_buttons)
			{
				if ( $core.isUndefined(exclude_save_buttons) )
				{
					exclude_save_buttons = false;
				}

				var buttons = this.getButtons();

				for ( var button_key in buttons )
				{
					var button = buttons[button_key];

					if ( exclude_save_buttons === false || (exclude_save_buttons === true && typeof button.save !== 'undefined' && button.save === false)  )
					{
						$(button.selector).removeClass('disabled');
					}
				}
			},
			disableButtons: function(only_save_buttons)
			{
				if ( $core.isUndefined(only_save_buttons) )
				{
					only_save_buttons = false;
				}

				var buttons = this.getButtons();

				for ( var button_key in buttons )
				{
					var button = buttons[button_key];

					if ( only_save_buttons === false || (only_save_buttons && (typeof button.save !== 'undefined' && button.save === true)) )
					{
						$(button.selector).addClass('disabled');
					}
					else
					{
						$(button.selector).removeClass('disabled');
					}
				}
			},
			resetButtons: function()
			{
				var buttons = this.getButtons();

				for ( var button_key in buttons )
				{
					var button = buttons[button_key];

					$(button.selector).html(button.text).removeClass('disabled');
				}
			},
			showLoader: function(text)
			{
				if ( $core.isUndefined(text) )
				{
					text = this.options.loadingText;
				}

				dialog.$dialog.classList.add('loading');
				dialog.$content.style.lineHeight = dialog.$content.style.height;
				dialog.$loader_text.innerHTML = text;
				dialog.$loader.style.display = 'block';
			},
			setLoaderText: function(text)
			{
				dialog.$loader_text.innerHTML = text;
			},
			hideLoader: function()
			{
				dialog.$dialog.classList.remove('loading');
				dialog.$loader.style.display = 'none';
			},
			save: function(data)
			{
				var dialog_inst = this;

				dialog_inst.showLoader(dialog_inst.options.savingText);
				dialog_inst.disableButtons();

				if ( typeof data._token === 'undefined' )
				{
					data._token = $core.options.csrf_token;
				}

				$core.ajax.post
				(
					dialog_inst.options.saveURL,
					data,
					{
						success: function(result)
						{
							if ( $core.isFunction(dialog_inst.options.afterSaved) )
							{
								dialog_inst.options.afterSaved();
							}

							if ( dialog_inst.options.closeAfterSave === true )
							{
								dialog_inst.close();
							}
						},
						error: function()
						{
							dialog_inst.setError('Could not save promo.');
						},
						always: function()
						{
							dialog_inst.hideLoader();

							if ( dialog_inst.options.closeAfterSave === false )
							{
								dialog_inst.enableButtons();
							}
						}
					}
				);
			},
			setError: function(error)
			{
				this.$content.style.lineHeight = dialog.$content.style.height;
				this.$content.className = 'core-dialog-content error';
				this.$content.innerHTML = error;

				this.disableButtons(true);
			},
			setGetData: function(data)
			{
				this.options.getData = data;
			},
			getGetData: function(key)
			{
				return this.options.getData[key];
			}
		};

		var content_height = dialog.options.height - (dialog.options.verticalPadding * 2) - dialog.options.headerHeight - dialog.options.buttonsContainerHeight;

		dialog.$loader = document.createElement('div');
		dialog.$loader.className = 'ui segment core-dialog-loader-container';
		dialog.$loader.style.height = content_height + 'px';

		var $loader_dimmer = document.createElement('div');
		$loader_dimmer.className = 'ui active inverted dimmer';

		dialog.$loader_text = document.createElement('div');
		dialog.$loader_text.setAttribute('id', 'core_dialog_' + dialog.id + '_loader_text');

		var loader_size;

		if ( dialog.options.height > 640 )
		{
			loader_size = 'large';
		}
		else if ( dialog.options.height > 480 )
		{
			loader_size = 'medium';
		}
		else
		{
			loader_size = 'small';
		}

		dialog.$loader_text.className = 'ui ' + loader_size + ' text loader';
		dialog.$loader_text.innerHTML = dialog.options.loadingText;

		$loader_dimmer.appendChild(dialog.$loader_text);
		dialog.$loader.appendChild($loader_dimmer);

		dialog.$header = document.createElement('div');
		dialog.$header.className = 'core-dialog-header';
		dialog.$header.style.height = dialog.options.headerHeight + 'px';
		dialog.$header.innerHTML = '<div class="core-dialog-header-title">' + dialog.options.title + '</div>' + (dialog.options.closeButton === true ? '<div class="core-dialog-header-buttons"><a href="javascript:" class="core-dialog-close-button"><i class="remove icon"></i></a></div>' : '');

		dialog.$content = document.createElement('div');
		dialog.$content.className = 'core-dialog-content';

		dialog.$content.style.height = content_height + 'px';

		dialog.$buttons_container = document.createElement('div');
		dialog.$buttons_container.className = 'core-dialog-buttons-container';
		dialog.$buttons_container.style.height = dialog.options.buttonsContainerHeight + 'px';

		dialog.$buttons = document.createElement('div');
		dialog.$buttons.className = 'core-dialog-buttons';

		var initButton = function(button)
		{
			button.selector = '#dialog_' + dialog.id + '_button_' + (i + 1);
			button.html = '<a href="javascript:" id="' + button.selector.substring(1) + '" class="ui button tiny disabled' + (typeof button.save !== 'undefined' && button.save === true ? ' blue' : '') + '">' + button.text + '</a>';

			(function(button, i)
			{
				button.setText = function(text)
				{
					$(button.selector).html(text);

					return button;
				};

				button.setLoadingText = function()
				{
					button.setText(button.loadingText);
				};

				button.enable = function()
				{
					$(button.selector).removeClass('disabled');

					return button;
				};

				button.disable = function()
				{
					$(button.selector).addClass('disabled');

					return button;
				};

				button.spin = function()
				{
					$(button.selector).addClass('loading');

					return button;
				};

				button.stopSpin = function()
				{
					$(button.selector).removeClass('loading');

					return button;
				};
			})(button, i);

			return button;
		};

		if ( dialog.options.modes !== null )
		{
			for ( var mode_key in dialog.options.modes )
			{
				var mode = dialog.options.modes[mode_key];

				if ( $core.isDefined(mode.buttons) )
				{
					for ( var i = 0, num_buttons = mode.buttons.length; i < num_buttons; i++ )
					{
						dialog.options.modes[mode_key].buttons[i] = initButton(dialog.options.modes[mode_key].buttons[i]);
					}
				}
			}
		}
		else
		{
			for ( var i = 0, num_buttons = options.buttons.length; i < num_buttons; i++ )
			{
				dialog.options.buttons[i] = initButton(dialog.options.buttons[i]);
			}
		}

		dialog.$buttons_container.appendChild(dialog.$buttons);

		var $dialog = document.createElement('div');
		$dialog.className = 'core-dialog';
		$dialog.setAttribute('id', 'core_dialog_' + dialog.id);
		$dialog.style.width = dialog.options.width + 'px';
		$dialog.style.height = dialog.options.height + 'px';
		$dialog.style.marginTop = -(dialog.options.height / 2) + 'px';
		$dialog.style.marginLeft = -(dialog.options.width / 2) + 'px';
		$dialog.style.padding = dialog.options.verticalPadding + 'px' + ' ' + dialog.options.horizontalPadding + 'px';

		$dialog.appendChild(dialog.$loader);
		$dialog.appendChild(dialog.$header);
		$dialog.appendChild(dialog.$loader);
		$dialog.appendChild(dialog.$content);
		$dialog.appendChild(dialog.$buttons_container);

		dialog.default_line_height = dialog.$content.style.lineHeight;

		dialog.$dialog = $dialog;

		inst.dialogs[dialog.id] = dialog;

		return dialog;
	}
};
function Core_UI_Message_Engine_SweetAlert() {}

Core_UI_Message_Engine_SweetAlert.prototype =
{
	core_ui_message: null,

	show: function(type, text, options)
	{
		var message_type = null;
		var show_cancel_button = false;

		if ( type === this.core_ui_message.MESSAGE_TYPE_SUCCESS )
		{
			message_type = 'success';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_INFO )
		{
			message_type = 'info';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_WARNING )
		{
			message_type = 'warning';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_ERROR )
		{
			message_type = 'error';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_CONFIRM )
		{
			show_cancel_button = true;
		}

		swal(
		{
			title: '',
			text: text,
			type: message_type,
			showCancelButton: show_cancel_button
		}, function(confirmed)
		{
			if ( $core.isDefined(options) )
			{
				if ( confirmed === true && $core.isFunction(options.confirm_callback) )
				{
					options.confirm_callback()
				}
				else if ( confirmed === false && $core.isFunction(options.cancel_callback) )
				{
					options.cancel_callback();
				}
			}
		});
	}
};
function Core_UI_Message_Engine_Noty() {}

Core_UI_Message_Engine_Noty.prototype =
{
	core_ui_message: null,

	show: function(type, text, options)
	{
		var message_type = null;
		var show_cancel_button = false;

		if ( type === this.core_ui_message.MESSAGE_TYPE_SUCCESS )
		{
			message_type = 'alert';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_INFO )
		{
			message_type = 'alert';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_WARNING )
		{
			message_type = 'warning';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_ERROR )
		{
			message_type = 'error';
		}
		else if ( type === this.core_ui_message.MESSAGE_TYPE_CONFIRM )
		{
			show_cancel_button = true;
		}

		noty(
		{
			layout: 'topRight',
			type: message_type,
			text: text,
			timeout: 2000,
			maxVisible: 1
		});

		/*swal(
		{
			title: '',
			text: text,
			type: message_type,
			showCancelButton: show_cancel_button
		}, function(confirmed)
		{
			if ( $core.isDefined(options) )
			{
				if ( confirmed === true && $core.isFunction(options.confirm_callback) )
				{
					options.confirm_callback()
				}
				else if ( confirmed === false && $core.isFunction(options.cancel_callback) )
				{
					options.cancel_callback();
				}
			}
		});*/
	}
};
function Core_UI_Message() {}

Core_UI_Message.prototype =
{
	MESSAGE_TYPE_DEFAULT: 1,
	MESSAGE_TYPE_SUCCESS: 2,
	MESSAGE_TYPE_INFO: 3,
	MESSAGE_TYPE_WARNING: 4,
	MESSAGE_TYPE_ERROR: 5,
	MESSAGE_TYPE_CONFIRM: 6,

	engine: null,

	init: function()
	{
		if ( $core.isDefined($core.options.message.engine) )
		{
			this.setEngine($core.options.message.engine);
		}
	},

	afterDomInit: function()
	{
		if ( typeof core_message !== 'undefined' )
		{
			this.engine.show(core_message.type, core_message.text);
		}
	},

	setEngine: function(engine)
	{
		this.engine = engine;
		this.engine.core_ui_message = this;
	},

	success: function(text, options)
	{
		this.engine.show(this.MESSAGE_TYPE_SUCCESS, text, options);
	},

	info: function(text, options)
	{
		this.engine.show(this.MESSAGE_TYPE_INFO, text, options);
	},

	warning: function(text, options)
	{
		this.engine.show(this.MESSAGE_TYPE_WARNING, text, options);
	},

	error: function(text, options)
	{
		this.engine.show(this.MESSAGE_TYPE_ERROR, text, options);
	},

	confirm: function(text, confirm_callback, cancel_callback, options)
	{
		if ( $core.isUndefined(options) )
		{
			options = {};
		}

		options.confirm_callback = confirm_callback;
		options.cancel_callback = cancel_callback;

		this.engine.show(this.MESSAGE_TYPE_CONFIRM, text, options);
	}
};
function Core_UI() {}

Core_UI.prototype =
{
	message: null,
	dialog: null,

	init: function()
	{
		this.message = new Core_UI_Message();
		this.message.init();

		this.dialog = new Core_UI_Dialog();
		this.dialog.init();
	},

	afterDomInit: function()
	{
		this.message.afterDomInit();
	},

	setCaretAtEnd: function($element)
	{
		var value_length = $element.value.length;

		if ( document.selection )
		{
			$element.focus();

			var range = document.selection.createRange();
			range.moveStart('character', -value_length);
			range.moveStart('character', value_length);
			range.moveEnd('character', 0);
			range.select();
		}
		else if ( $element.selectionStart || $element.selectionStart === 0 )
		{
			$element.selectionStart = value_length;
			$element.selectionEnd = value_length;
			$element.focus();
		}
	},
	viewport: function()
	{
		var e = window,
			a = 'inner';

		if ( !('innerWidth' in window) )
		{
			a = 'client';
			e = document.documentElement || document.body;
		}

		return { width: e[a + 'Width'], height: e[a + 'Height'] };
	}
};
function Core_Form_File_Upload() {}

Core_Form_File_Upload.prototype =
{
	PROGRESS_BAR_TYPE_DIALOG: 1,
	PROGRESS_BAR_TYPE_CUSTOM: 2,
	PROGRESS_BAR_TYPE_DYNAMIC_ITEM: 3,

	default_options:
	{
		saveURL: null,
		progressBarType: 2,
		progressBarDialog: null,
		progressBarContainerSelector: null,
		progressBarKeyword: null,
		maxFileSize: '2',
		allowedFileTypes: null,
		data: {},
		onStart: null,
		onProgress: null,
		onComplete: null,
		onAlways: function() {},
		onError: null
	},

	file_uploads: {},

	init: function(selector, options)
	{
		var inst = this;

		for ( var option_key in inst.default_options )
		{
			if ( inst.default_options.hasOwnProperty(option_key) && !options.hasOwnProperty(option_key) )
			{
				options[option_key] = inst.default_options[option_key];
			}
		}

		inst.file_uploads[selector] =
		{
			$element: document.querySelector(selector),
			options: options,
			$progressBarContainer: null
		};

		if ( inst.file_uploads[selector].$element === null )
		{
			$core.log('Could not find file upload element "' + this.selector + '".');

			return;
		}
		else if ( inst.file_uploads[selector].options.saveURL === null )
		{
			$core.log('Missing required option "saveURL".');

			return;
		}

		if ( inst.file_uploads[selector].options.progressBarType === inst.PROGRESS_BAR_TYPE_DIALOG )
		{
			if ( inst.file_uploads[selector].options.progressBarDialog === null )
			{
				$core.log('No progress bar dialog defined.');

				return;
			}
		}
		else if ( inst.file_uploads[selector].options.progressBarType === inst.PROGRESS_BAR_TYPE_CUSTOM )
		{
			if ( inst.file_uploads[selector].options.progressBarContainerSelector === null )
			{
				$core.log('No progress bar selector defined.');

				return;
			}

			var $progressBarContainer = document.querySelector(inst.file_uploads[selector].options.progressBarContainerSelector);

			if ( $progressBarContainer === null )
			{
				$core.log('Could not find file upload progress bar container "' + inst.file_uploads[selector].options.progressBarContainerSelector + '".');

				return;
			}

			$progressBarContainer.innerHTML = '<div class="ui small progress"><div class="bar"><div class="progress"></div></div><div class="label"></div></div>';

			$(inst.file_uploads[selector].options.progressBarContainerSelector).find('.progress').progress(
			{
				percent: 0
			});

			inst.file_uploads[selector].$progressBarContainer = document.querySelector(inst.file_uploads[selector].options.progressBarContainerSelector);

			inst.file_uploads[selector].$element.addEventListener('change', function()
			{
				inst.file_uploads[selector].$progressBarContainer.style.display = 'block';

				if ( inst.checkFileSize(selector) === true && inst.checkFileType(selector) === true )
				{
					inst.clearError(selector);
				}
			}, false);
		}

		return {
			start: function()
			{
				var _inst = this,
					files = $(selector)[0].files,
					file_upload_inst = inst.file_uploads[selector];

				if ( files.length === 0 )
				{
					$core.log('No file to upload.');

					file_upload_inst.options.onAlways();

					return;
				}
				else if ( files.length > 1 )
				{
					$core.log('More than one file selected.');

					file_upload_inst.options.onAlways();

					return;
				}

				var file = files[0];

				file_upload_inst.options.data.mime = file.type;

				if ( $core.isFunction(file_upload_inst.options.onStart) )
				{
					inst.file_uploads[selector].options.onStart();
				}

				if ( file_upload_inst.options.progressBarType === inst.PROGRESS_BAR_TYPE_DIALOG )
				{
					file_upload_inst.options.progressBarDialog.showLoader('Start uploading of ' + file_upload_inst.options.progressBarKeyword + '...');
				}

				$core.ajax.post
				(
					file_upload_inst.options.saveURL,
					file,
					{
						progress: function(percent)
						{
							if ( file_upload_inst.options.progressBarType === inst.PROGRESS_BAR_TYPE_DIALOG )
							{
								file_upload_inst.options.progressBarDialog.setLoaderText('Uploading ' + file_upload_inst.options.progressBarKeyword + ' (' + percent + '%)...');
							}
							else if ( file_upload_inst.options.progressBarType === inst.PROGRESS_BAR_TYPE_CUSTOM )
							{
								$(file_upload_inst.options.progressBarContainerSelector).find('.progress').progress({ percent: percent });

								if ( $core.isFunction(file_upload_inst.options.onProgress) )
								{
									file_upload_inst.options.onProgress(percent);
								}
							}
							else if ( file_upload_inst.options.progressBarType === inst.PROGRESS_BAR_TYPE_DYNAMIC_ITEM )
							{
							}
						},
						success: function(result)
						{
							if ( $core.isFunction(file_upload_inst.options.onComplete) )
							{
								file_upload_inst.options.onComplete();
							}

							file_upload_inst.options.onAlways();
						},
						error: function()
						{
							inst.throwError(selector, 'Could not save image (<a href="javascript:" class="core-file-upload-retry-button">retry</a>).');

							$(file_upload_inst.options.progressBarContainerSelector).find('.core-file-upload-retry-button').on('click', function()
							{
								$(file_upload_inst.options.progressBarContainerSelector).find('.progress').progress({ percent: 0 });

								_inst.start();
							});

							if ( $core.isFunction(file_upload_inst.options.onError) )
							{
								file_upload_inst.options.onError();
							}

							file_upload_inst.options.onAlways();
						}
					},
					{
						file_upload: true,
						file_upload_data: file_upload_inst.options.data
					}
				);
			},
			addData: function(key, value)
			{
				inst.file_uploads[selector].options.data[key] = value;
			}
		};
	},

	checkFileSize: function(selector)
	{
		var file = $(selector)[0].files[0];

		if ( file.size > post_max_size )
		{
			this.throwError(selector, 'File (' + $core.formatSize(file.size) + ') is larger than server post max size (' + $core.formatSize(post_max_size) + ').');

			return false;
		}
		else if ( file.size > upload_max_filesize )
		{
			this.throwError(selector, 'File (' + $core.formatSize(file.size) + ') is larger than server max upload file size (' + $core.formatSize(upload_max_filesize) + ').');

			return false;
		}

		return true;
	},

	checkFileType: function(selector)
	{
		var inst = this,
			allowed_file_types = inst.file_uploads[selector].options.allowedFileTypes;

		if ( allowed_file_types === null )
		{
			return true;
		}

		var file = $(selector)[0].files[0];

		if ( !$core.inArray(file.type, allowed_file_types) )
		{
			this.throwError(selector, 'Selected file type (' + file.type + ') is not valid (' + $core.implode(', ', allowed_file_types) + ').');

			return false;
		}

		return true;
	},

	throwError: function(selector, error)
	{
		var inst = this,
			$progress_bar_container = $(inst.file_uploads[selector].options.progressBarContainerSelector),
			$label = $progress_bar_container.find('.label');

		$progress_bar_container.find('.progress').addClass('error');
		$label.html(error);
	},

	clearError: function(selector)
	{
		var inst = this,
			$progress_bar_container = $(inst.file_uploads[selector].options.progressBarContainerSelector),
			$label = $progress_bar_container.find('.label');

		$progress_bar_container.find('.progress').removeClass('error');
		$label.html('');
	}
};
function Core_Form() {}

Core_Form.prototype =
{
	file_upload: null,

	init: function()
	{
		this.file_upload = new Core_Form_File_Upload();
	}
};
function Core_DynamicItem() {}

Core_DynamicItem.prototype =
{
	core_segments: [],
	num_core_segments: 0,

	init: function()
	{
		var self = this;

		$('.core-segment').each(function(core_segment_index, core_segment_element)
		{
			self.core_segments[core_segment_index] =
			{
				index: core_segment_index,
				selector: core_segment_element.getAttribute('id'),
				route: core_segment_element.getAttribute('data-route'),
				loading_html: core_segment_element.innerHTML,
				dynamic_item_options: JSON.parse(core_segment_element.getAttribute('data-options')),
				current_page: 1
			};

			self.num_core_segments++;
		});

		self.initSegments();
	},

	initSegments: function()
	{
		var self = this;

		for ( var core_segment_index = 0; core_segment_index < self.num_core_segments; core_segment_index++ )
		{
			(function(core_segment_index)
			{
				self.refreshSegment(core_segment_index);
			})(core_segment_index);
		}
	},

	refreshSegment: function(core_segment_index)
	{
		var self = this,
			core_segment = self.core_segments[core_segment_index],
			core_segment_element = document.getElementById(core_segment.selector);

		core_segment_element.innerHTML = core_segment.loading_html;

		var ajax_data = {};

		if ( core_segment.dynamic_item_options.paging.enabled === true )
		{
			ajax_data.page = core_segment.current_page;
		}

		$core.ajax.get
		(
			core_segment.route,
			ajax_data,
			{
				success: function(result)
				{
					core_segment_element.innerHTML = result.data.html;

					self.coreSegmentBinds(core_segment_index);
				},
				error: function()
				{
				}
			}
		);
	},

	coreSegmentBinds: function(core_segment_index)
	{
		var self = this,
			core_segment = self.core_segments[core_segment_index];

		if ( core_segment.dynamic_item_options.paging.enabled )
		{
			var $pagination_container = $('#' + core_segment.selector).find('.pagination');

			$pagination_container.find('.prev:not(.disabled)').on('click', function()
			{
				self.core_segments[core_segment_index].current_page--;

				self.refreshSegment(core_segment_index);
			});

			$pagination_container.find('.next:not(.disabled)').on('click', function()
			{
				self.core_segments[core_segment_index].current_page++;

				self.refreshSegment(core_segment_index);
			});
		}
	}
};
function Core() {}

Core.prototype =
{
	options:
	{
		csrf_token: null,
		uri:
		{
			base_url: null
		},
		message:
		{
			engine: null
		},
		dynamic_table:
		{
			manage_dropdown_settings:
			{
				transition: 'drop',
				duration: 125
			}
		}
	},

	uri: null,
	ui: null,
	ajax: null,
	form: null,
	dynamic_table: null,
	dynamic_item: null,

	init: function(options)
	{
		if ( typeof options === 'object' )
		{
			this.options = $.extend(this.options, options);
		}

		this.uri = new Core_URI();

		this.ajax = new Core_Ajax();

		this.ui = new Core_UI();
		this.ui.init();

		this.form = new Core_Form();
		this.form.init();

		this.dynamic_item = new Core_DynamicItem();
		this.dynamic_item.init();
	},

	afterDomInit: function()
	{
		this.ui.afterDomInit();
	},

	isEmpty: function(object)
	{
		if ( object === null )
		{
			return true;
		}

		if ( this.isArray(object) || this.isString(object) )
		{
			return (object.length === 0);
		}


		for ( var key in object )
		{
			if ( object.hasOwnProperty(key) )
			{
				if ( this.has(object, key) )
				{
					return false;
				}
			}
		}

		return true;
	},

	isUndefined: function(object)
	{
		return object == void 0;
	},

	isDefined: function(object)
	{
		return !this.isUndefined(object);
	},

	exists: function(object)
	{
		return object.length > 0;
	},

	isObject: function(object)
	{
		return object === Object(object);
	},

	isArray: Array.isArray || function(object)
	{
		return Object.prototype.toString.call(object) == '[object Array]';
	},

	inArray: function(subject, array)
	{
		return ($.inArray(subject, array) !== -1);
	},

	isFunction: function(object)
	{
		return (typeof object === 'function');
	},

	isString: function(object)
	{
		return Object.prototype.toString.call(object) === '[object String]';
	},

	isNumber: function(object)
	{
		return !isNaN(object);
	},

	isInteger: function(object)
	{
		return Object.prototype.toString.call(object) === '[object Number]';
	},

	has: function(object, key)
	{
		return Object.prototype.hasOwnProperty.call(object, key);
	},

	log: function(message)
	{
		window.console && console.log('Core: ' + message);
	},

	isEmail: function(str)
	{
		var regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

		return str.length && regex.test(str);
	},

	getUnixTimestamp: function()
	{
		if ( !Date.now )
		{
			Date.now = function ()
			{
				return +new Date();
			};
		}

		return Date.now();
	},

	round: function(number, decimals)
	{
		return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);
	},

	formatSize: function(size)
	{
		if ( size >= 1073741824 )
		{
			return this.round(size / 1073741824, 2) + ' GB';
		}

		if ( size >= 1048576 )
		{
			return this.round(size / 1048576, 2) + ' MB';
		}

		if ( size >= 1024 )
		{
			return this.round(size / 1024, 0) + ' KB';
		}

		return size + ' B';
	},

	escape: function(html)
	{
		return html
			.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&#039;');
	},

	shake: function($element, num_times, size)
	{
		for ( var i = 0; i < num_times; i++ )
		{
			$element.css('postion','relative').animate({ 'margin-left': '+=' + (size = -size) + 'px' }, 50);
		}
	},

	format: function(format)
	{
		var args = Array.prototype.slice.call(arguments, 1);

		return format.replace(/{(\d+)}/g, function(match, number)
		{
			return typeof args[number] != 'undefined' ? args[number] : match;
		});
	},

	implode: function(glue, pieces, last_glue)
	{
		var i = '',
			return_value = '',
			append_glue = '';

		last_glue = last_glue || null;

		if ( arguments.length === 1 )
		{
			pieces = glue;
			glue = '';
		}

		if ( typeof pieces === 'object' )
		{
			if ( Object.prototype.toString.call(pieces) === '[object Array]' && last_glue === null )
			{
				return pieces.join(glue);
			}

			var num_pieces = pieces.length;

			for ( i in pieces )
			{
				return_value += append_glue + pieces[i];
				append_glue = (i < (num_pieces - 2) ? glue : last_glue);
			}

			return return_value;
		}

		return pieces;
	},

	getObjectSize: function(object)
	{
		var size = 0,
			key;

		for ( key in object )
		{
			if ( object.hasOwnProperty(key) )
			{
				size++;
			}
		}

		return size;
	},

	ucfirst: function(str)
	{
		return str.charAt(0).toUpperCase() + str.slice(1);
	},

	lcfirst: function(str)
	{
		return str.charAt(0).toLowerCase() + str.slice(1);
	}
};
